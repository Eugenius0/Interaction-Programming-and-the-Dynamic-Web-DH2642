import{_ as a}from"./shim-7e3475d3.js";import{d as r}from"./dishesConst-c8e864fd.js";import{e}from"./index-6400038e.js";import{c as h}from"./cloneModel-bb0f0793.js";import"./util-004fc0f1.js";const u=await a(()=>import("../src/utilities.js"),[]),{isKnownTypeCB:i,dishType:n}=u;function s(d){return r.find(function(t){return t.id===d})}describe("TW1.1.3 filter(CB) exercises: dishType and removeFromMenu",function(){this.parent.setMaxListeners(200),this.timeout(2e5);let t;before(async function(){(!u||!i||!n)&&this.skip();const m=h((await a(()=>import("../src/DinnerModel.js"),[])).model);try{t=h(m)}catch(p){console.error(p)}}),it("isKnownTypeCB recognizes only starter, main course, dessert (export isKnownTypeCB and dishType to enable)",function(){this._runnable.title="isKnownTypeCB recognizes only starter, main course, dessert",e(i("starter"),"starter is a known type, so we should return truthy").to.be.ok,e(i("main course"),"main course is a known type, so we should return truthy").to.be.ok,e(i("dessert"),"dessert is a known type, so we should return truthy").to.be.ok,e(i("appetizer"),"appetizer is not a known type, so we should return falsy").to.not.be.ok}),it("dishType returns a known dish type",function(){e(n(r[4])).to.equal("main course")}),it("dishType returns empty string if starter, main course, dessert not present",function(){e(n(r[0])).to.equal("")}),it("dishType returns empty string if dishTypes property not present",function(){e(n(r[7])).to.equal("")}),it("can remove dishes",function(){t.dishes=[s(100),s(1),s(200)],t.removeFromMenu({id:1}),e(t.dishes.length,"after removing a dish from a menu with 3 dishes, length of dishes expcted to be 2").to.equal(2),e(t.dishes,"The model properly removes dish when given {id:1} as an argument").to.not.include(s(1)),e(t.dishes,"inserted dish with ID 100 expected to be in the menu after another dish was removed").to.include(s(100)),e(t.dishes,"inserted dish with ID 200 expected to be in the menu after another dish was removed").to.include(s(200)),t.removeFromMenu({id:256}),e(t.dishes.length,"The model should not remove dishes that do not exist").to.equal(2),e(t.dishes,"inserted dish with ID 100 expected to be in the menu").to.include(s(100)),e(t.dishes,"inserted dish with ID 200 expected to be in the menu").to.include(s(200))})});
