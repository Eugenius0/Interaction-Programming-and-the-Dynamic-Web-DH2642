import{e}from"./index-6400038e.js";import{m as d}from"./mockModel-b7c7107c.js";import{s as F}from"./mockFetch-ba9030b0.js";import{g as c}from"./filesToTest-e54ca7e1.js";import{t as g}from"./testComponentTL-6fcfc331.js";import{f as V}from"./findCustomEvents-18f41d5f.js";import{c as _}from"./cloneModel-bb0f0793.js";import"./shim-7e3475d3.js";import"./util-004fc0f1.js";import"./vue.runtime.esm-bundler-12250fee.js";import"./runtime-dom.esm-bundler-9a021e8b.js";import"./runtime-core.esm-bundler-8a2f4052.js";import"./reactivity.esm-bundler-91732a87.js";import"./index-7ea524dd.js";import"./index-93c19621.js";import"./index-37df3fb2.js";import"./client-eba7b630.js";import"./mobx.esm-c867959f.js";import"./jsxUtilities-a811c57a.js";const h="",S=(await c(`/src/vuejs/${h}searchPresenter.jsx`))?.Search,b=(await c(`/src/reactjs/${h}searchPresenter.jsx`))?.Search,u=(await c(`/src/views/${h}searchFormView.vue`))?.SearchFormView||(await c(`/src/views/${h}searchFormView.jsx`))?.SearchFormView,l=(await c(`/src/views/${h}searchResultsView.vue`))?.SearchResultsView||(await c(`/src/views/${h}searchResultsView.jsx`))?.SearchResultsView,P=_((await c(`/src/${h}DinnerModel.js`))?.model),T=P?.searchParams;describe("TW2.4.2 Presenter passing props and handling custom events: Search [test Vue](/tw2.4.2.html)[React](/tw2.4.2-react.html)[Final TW2 test Vue](/vue.html#/search)[Final TW2 test React](/react.html#/search)",async function(){this.timeout(2e5),before(function(){(!S&&!b||!u||!l)&&this.skip(),P?.searchResultsPromiseState||this.skip()}),beforeEach(function(){}),T&&g({vue:S,react:b,mock:[{component:u,dummyText:"mock searchForm view"},{component:l,dummyText:"mock searchResults view"}]},{model:new Proxy({searchResultsPromiseState:{},searchParams:{query:"some test Query",type:"test Type"},doSearch(r){},setSearchQuery(r){},setSearchType(r){}},d("Search presenter test"))},"$framework Search presenter passes text, type and dishTypeOptions props to SearchFormView",function(s,o,i){e(s.queryByText(/mock searchForm view/),"Search presenter should always render the search form view").to.be.ok;const t=i[0]?.propsHistory[0];e(t,"The SearchFormView should be sent props").to.be.ok,e(t,"prop 'text' not passed to SearchFormView").to.have.property("text"),e(t.text,"prop 'text' sent to SearchFormView should be read from the model search params").to.equal("some test Query"),e(t,"prop 'type' not passed to SearchFormView").to.have.property("type"),e(t.type,"prop 'type' sent to SearchFormView should be read from the model search params").to.equal("test Type"),e(t,"prop 'dishTypeOptions' not passed to SearchFormView").to.have.property("dishTypeOptions"),e(JSON.stringify(t.dishTypeOptions),"the options passed should be an array containing starter, main course, dessert").to.equal(JSON.stringify(["starter","main course","dessert"]))});let p,w,y,k,R;beforeEach(function(){p=w=y=k=void 0}),T&&g({vue:S,react:b,mock:[{component:u,dummyText:"mock searchForm view"},{component:l,dummyText:"mock searchResults view"}]},{model:R=new Proxy({searchResultsPromiseState:{},searchParams:{query:"some test Query",type:"test Type"},doSearch(r){p=!0,k=r},setSearchQuery(r){w=r},setSearchType(r){y=r}},d("Search presenter test"))},"$framework Search presenter handles custom events fired by SearchFormView",function(s,o,i){p=w=y=k=void 0,e(s.queryByText(/mock searchForm view/),"Search presenter should always render the search form view").to.be.ok;const t=i[0]?.propsHistory[0],v=V(u,{dishTypeOptions:["starter","main course","dessert"]}),n=v.button.filter(function(q){return q.element.children.flat()[0].toLowerCase().trim().startsWith("search")})[0].customEventName,a=v.select[0].customEventName,m=v.input[0].customEventName;e(t[m],`custom event handler ${m} should be a function`).to.be.a("function"),e(w,"did not expect model method to be called during Search rendering, did you pass a function as custom event handler?").to.not.be.ok,t[m]("some test search query"),e(w,"custom event handler "+m+" should change search query in the model").to.equal("some test search query"),e(t[a],`custom event handler ${a} should be a function`).to.be.a("function"),e(y,"did not expect model method to be called during Search rendering, did you pass a function as custom event handler?").to.not.be.ok,t[a]("some test search type"),e(y,"custom event handler "+a+" should change search type in the model").to.equal("some test search type"),e(t[n],`custom event handler ${n} should be a function`).to.be.a("function"),e(t[n].length,`custom event handler ${n} should have zero parameters`).to.equal(0),e(p,"did not expect model method to be called during Search rendering, did you pass a function as custom event handler?").to.not.be.ok,t[n](),e(p,"custom event handler "+n+" should trigger search in the model").to.equal(!0),e(k,"custom event handler "+n+" should trigger search in the model with the parameters filled in by the user").to.deep.equal(R.searchParams)});const x=T?{searchParams:{}}:{doSearch(){}};g({vue:S,react:b,mock:[{component:u,dummyText:"mock searchForm view"},{component:l,dummyText:"mock searchResults view"}]},[{model:new Proxy({...x,searchResultsPromiseState:{}},d("Search presenter with no promise"))},{model:new Proxy({...x,searchResultsPromiseState:{promise:"bla"}},d("Seach presenter with promise but no data or error"))},{model:new Proxy({...x,searchResultsPromiseState:{promise:"bla",error:"big error"}},d("DetailsPresenter with promise and error"))}],"$framework Search presenter determines whether to render 'no data', loading image or error",function(s,o,i){e(s.container.firstChild?.tagName,"Search presenter must render a DIV").to.equal("DIV"),e(s.container.firstChild.childNodes.length,"Search presenter DIV must contain two children: 1) the search form view and 2) suspense or search results view").to.equal(2),e(s.queryByText(/mock searchForm view/),"Search presenter should always render the search form view").to.be.ok;const t=o===0&&s.queryByText(/no data/i)||o===1&&s.queryByRole("img")||o===2&&s.queryByText(/big error/i);e(t,o===0&&"when there is no promise, Search presenter should show 'no data'"||o===1&&"when there is a promise but no data or error yet, Search presenter should render a loading image"||o===2&&"when there is a promise but it rejected, Search presenter should render the error converted to string").to.be.ok});let f;beforeEach(function(){f=void 0}),g({vue:S,react:b,mock:[{component:u,dummyText:"mock searchForm view"},{component:l,dummyText:"mock searchResults view"}]},{model:new Proxy({...x,searchResultsPromiseState:{promise:"foo",data:"bar"},setCurrentDishId(r){f=r}},d("Search presenter test"))},"$framework Search presenter sends the searchResults prop and handles custom event fired by SearchResultsView",function(s,o,i){f=void 0,e(s.queryByText(/mock searchForm view/),"Search presenter should always render the search form view").to.be.ok,e(s.queryByText(/mock searchResults view/),"Search presenter should render the search results view when there is a promise and data").to.be.ok;const t=i[1]?.propsHistory[0];e(t,"prersenter should pass props to SearchResutlsView").to.be.ok,e(t,"SearchResultsView is missing the searchResults prop").to.have.property("searchResults"),e(t.searchResults,"searchResults prop should be the data in search result promise state").to.equal("bar");const a=V(l,{searchResults:[F[0]]}).span.filter(m=>m?.element?.props?.onClick)[0].customEventName;e(t[a],`custom event handler ${a} should be a function`).to.be.a("function"),e(f,"did not expect model method to be called, did you pass a function as custom event handler?").to.equal(void 0),t[a]({id:42}),e(f,"custom event handler "+a+" should set current dish in the model").to.equal(42)})});
