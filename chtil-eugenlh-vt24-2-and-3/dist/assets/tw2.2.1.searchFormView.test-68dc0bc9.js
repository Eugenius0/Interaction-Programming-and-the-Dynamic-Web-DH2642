import{e}from"./index-6400038e.js";import{g as y}from"./filesToTest-e54ca7e1.js";import{t as p,r as v,f as u}from"./testComponentTL-6fcfc331.js";import{f as T}from"./findCustomEvents-18f41d5f.js";import{h as S}from"./runtime-core.esm-bundler-8a2f4052.js";import"./shim-7e3475d3.js";import"./util-004fc0f1.js";import"./vue.runtime.esm-bundler-12250fee.js";import"./runtime-dom.esm-bundler-9a021e8b.js";import"./reactivity.esm-bundler-91732a87.js";import"./index-7ea524dd.js";import"./index-93c19621.js";import"./index-37df3fb2.js";import"./client-eba7b630.js";import"./mobx.esm-c867959f.js";import"./jsxUtilities-a811c57a.js";const b="",s=(await y(`/src/views/${b}searchFormView.vue`))?.SearchFormView||(await y(`/src/views/${b}searchFormView.jsx`))?.SearchFormView;describe("TW2.2.1 rendering recap, fire custom events: SearchFormView [test Vue](/tw2.2.1.html)[React](/tw2.2.1-react.html)",function(){this.timeout(2e5),p({vue:s},[{dishTypeOptions:[]},{dishTypeOptions:["someType"],text:"bla",type:"someType"}],"SearchFormView renders textbox, SELECT box and button, and uses its text and type props",function(t,o){e(t.queryAllByRole("textbox").length,"1 textbox expected").to.equal(1),e(t.queryAllByRole("combobox").length,"Must only have 1 SELECT element").to.equal(1),e(t.queryAllByRole("button").length,"there should be at least one button").to.be.gte(1),e(t.queryByRole("button",{name:/search/i}),`the first button's text must include "search"`).to.be.ok,e(t.queryAllByRole("textbox")[0].value,"textbox value attribute must be the 'text' prop, or empty string if the prop is falsy").to.equal(o?"bla":""),e(t.queryAllByRole("combobox")[0].value,"SELECT value attribute must be the 'type' prop, or empty string if the prop is falsy").to.equal(o?"someType":"")}),p({vue:s},{dishTypeOptions:["start","main courze","desser"]},"SearchFormView renders dishTypeOptions prop (array rendering)",function(t,o){e(t.queryAllByRole("combobox").length,"Must only have 1 SELECT element").to.equal(1),e(t.queryByText(/Choose/),"Choose is rendered").to.be.ok;const n=t.queryAllByRole("option");e(n.length,"4 options must be rendered").to.equal(4);let r=[];n.forEach(c=>{r=[...r,c.textContent?.trim()]}),e(r[0],"First option must be Choose:").to.equal("Choose:"),e(r[1],"Second option must be the first array element").to.equal("start"),e(r[2],"Third option must be the second array element").to.equal("main courze"),e(r[3],"Fourth option must be the third array element").to.equal("desser")}),p({vue:s},[{dishTypeOptions:["starter","main course","dessert"]},{dishTypeOptions:["primero","segundo","tercero","cuarto"]}],"SearchFormView performs array rendering rather than repeating UI",function(t,o){const n=t.queryAllByRole("option");e(n[0].textContent,"First options must be 'Choose:'").to.equal("Choose:"),e(n.length,"Are all options from props rendered?").to.equal(o?5:4)}),it("SearchFormView fires custom events on text or type change (send text, type as parameter), and on button press",function(){s||this.skip();const t=T(s,{dishTypeOptions:["starter","main course","dessert"]}),o=t?.button.filter(i=>i.element.children[0].toLowerCase().startsWith("search")),n=t?.input,r=t?.select;e(o.length,"SearchFormview expected to have one search button").to.equal(1),e(n.length,"SearchFormView expected to have one  input box").to.equal(1),e(r.length,"SearchFormView expected to have one  select box").to.equal(1);let c=r[0]?.customEventName,x=n[0]?.customEventName,f=o[0]?.customEventName,m,h,d;window.React={createElement:S};const l=v({components:{SearchFormView:s},template:"<SearchFormView/>"},{props:{dishTypeOptions:["apetizer","main course","dessert"],[x]:function(i){h=i},[c]:function(i){m=i},[f]:function(){d=!0}},container:document.createElement("div")}),w=l.queryByRole("textbox"),g=l.queryByRole("combobox"),q=l.queryAllByRole("button").filter(i=>i.textContent.toLowerCase().includes("search"))[0];u.change(w,{target:{value:"some pizza"}}),u.change(g,{target:{value:"apetizer"}}),u.click(q),e(h,"the text box fires a custom event with the text content as parameter").to.equal("some pizza"),e(m,"the SELECT box fires a custom event with the selected option as parameter").to.equal("apetizer"),e(d,"the search button should fire a custom event").to.equal(!0)}),it("SearchFormView does not change its props during rendering",function(){s||this.skip(),window.React={createElement(){return{}}};const t={dishTypeOptions:["starter","main course","dessert"]},o=JSON.stringify(t);s(t),e(JSON.stringify(t),"SearchFormView doesn't change its props during rendering").to.equal(o)})});
