import{e as t}from"./index-6400038e.js";import{w as o,s as i,m as s}from"./mockFetch-ba9030b0.js";import{g as l}from"./filesToTest-e54ca7e1.js";import{c as a}from"./cloneModel-bb0f0793.js";import{o as h}from"./mobx.esm-c867959f.js";import"./shim-7e3475d3.js";import"./util-004fc0f1.js";const u="",c=a((await l(`/src/${u}DinnerModel.js`))?.model);describe("TW2.3.2 Promise State in Model: search [test](/tw2.3.2.html)",function(){this.timeout(2e5);let e;before(function(){e=a(c)}),this.beforeEach(function(){e=a(c)}),it("Model has searchParams",function(){e?.searchParams||this.skip(),this._runnable.title="Model sets the searchParams for search query and type",t(e,"Model could not be imported, please check the top of your Console").to.be.ok,t(e,"searchParams must be added to the model").to.have.property("searchParams"),t(JSON.stringify(e.searchParams),"searchParams expected to be initially an empty object").to.equal(JSON.stringify({}))}),it("setSearchQuery and setSearchType save their arguments in searchParams",function(){e?.searchParams||this.skip(),e.setSearchQuery("pizza"),e.setSearchType("main course"),t(e.searchParams,"searchParams must have the property query").to.have.property("query"),t(e.searchParams,"searchParams must have the property type").to.have.property("type"),t(e.searchParams.query,"searchParams must have the property query and it must be a string").to.be.a("string"),t(e.searchParams.type,"searchParams must have the property type and it must be a string").to.be.a("string"),t(e.searchParams.query,"searchParams query must be set to 'pizza' when setSearchQuery('pizza') is called").to.be.equal("pizza"),t(e.searchParams.type,"searchParams type must be set to 'main course' when setSearchType('main course') is called").to.be.equal("main course")}),it("Model defines property searchResultsPromiseState",async function(){e.searchResultsPromiseState||this.skip(),t(e,"Model must have a searchResultsPromiseState").to.have.property("searchResultsPromiseState"),t(JSON.stringify(e.searchResultsPromiseState),"searchResultsPromiseState expected to be initially an empty object").to.equal(JSON.stringify({}))}),it("doSearch performs a search with the given params and resolves the promise into searchResultsPromiseState",async function(){e.searchResultsPromiseState||this.skip(),o(s,()=>e.doSearch({query:"ice cream",type:"dessert"})),t(e.searchResultsPromiseState,"searchResultsPromiseState must have the property promise").to.have.property("promise"),t(e.searchResultsPromiseState.data,"searchResultsPromiseState data property must start as null").to.be.null,t(e.searchResultsPromiseState.error,"searchResultsPromiseState's error property initially starts null").to.be.null,t(e.searchResultsPromiseState.promise,"searchResultsPromiseState's promise property initially starts null").to.not.be.null,await e.searchResultsPromiseState.promise,t(e.searchResultsPromiseState.data,"Must store promise result in the data property").to.equal(i),t(s.lastFetch,"doSearch for ice cream should result in an API call that includes ice").to.include("ice"),t(s.lastFetch,"doSearch for ice cream should result in an API call that includes cream").to.include("cream"),t(s.lastFetch,"doSearch for dessert should result in an API call that includes dessert").to.include("dessert")}),it("doSearch works when used in a reactive model",async function(){e=h(e),e.searchResultsPromiseState||this.skip(),o(s,()=>e.doSearch({query:"ice cream",type:"dessert"})),t(e.searchResultsPromiseState,"searchResultsPromiseState must have the property promise").to.have.property("promise"),t(e.searchResultsPromiseState.data,"searchResultsPromiseState data property must start as null").to.be.null,t(e.searchResultsPromiseState.error,"searchResultsPromiseState's error property initially starts null").to.be.null,t(e.searchResultsPromiseState.promise,"searchResultsPromiseState's promise property initially starts null").to.not.be.null,await e.searchResultsPromiseState.promise,t(e.searchResultsPromiseState.data,"Must store promise result in the data property").to.deep.equal(i),t(s.lastFetch,"doSearch for ice cream should result in an API call that includes ice").to.include("ice"),t(s.lastFetch,"doSearch for ice cream should result in an API call that includes cream").to.include("cream"),t(s.lastFetch,"doSearch for dessert should result in an API call that includes dessert").to.include("dessert")})});
