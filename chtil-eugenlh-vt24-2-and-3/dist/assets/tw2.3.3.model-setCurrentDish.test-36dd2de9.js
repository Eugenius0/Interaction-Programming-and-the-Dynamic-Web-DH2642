import{e as t}from"./index-6400038e.js";import{w as n,a as h}from"./mockFetch-ba9030b0.js";import{g as o}from"./filesToTest-e54ca7e1.js";import{c as s}from"./cloneModel-bb0f0793.js";import"./shim-7e3475d3.js";import"./util-004fc0f1.js";const a="",c=s((await o(`/src/${a}DinnerModel.js`))?.model);(await o(`/src/vuejs/${a}detailsPresenter.jsx`))?.Details;(await o(`/src/reactjs/${a}detailsPresenter.jsx`))?.Details;describe("TW2.3.3 Promise state in Model: current dish [test](/tw2.3.3.html)",function(){this.timeout(2e5);let e;before(function(){try{e=s(c)}catch(i){console.error(i)}e&&!e.currentDishPromiseState&&this.skip()}),this.beforeEach(function(){try{e=s(c)}catch(r){console.error(r)}}),it("Model initializes currentDishPromiseState (needed to enable test)",function(){this._runnable.title="Model initializes currentDishPromiseState correctly",t(e,"Model could not be imported, please check the top of your Console!").to.be.ok,t(e,"model must have currentDishPromiseState property").to.have.property("currentDishPromiseState"),t(JSON.stringify(e.currentDishPromiseState),"currentDishPromiseState expected to be initially an empty object").to.equal(JSON.stringify({}))}),it("setCurrentDishId sets currentDishPromiseState if it gets a valid dish id",async function(){t(e).to.have.property("currentDishPromiseState");let r=601651;n(h,()=>e.setCurrentDishId(r)),t(e.currentDishPromiseState,"currentDishPromiseState must have a property called promise").to.have.property("promise"),t(e.currentDishPromiseState.data,"currentDishPromiseState must have a property called data which is initially null").to.be.null,t(e.currentDishPromiseState.error,"currentDishPromiseState must have a property called error which is initially null").to.be.null,t(e.currentDishPromiseState.promise,"currentDishPromiseState must have a property called promise which is initially null").to.not.be.null,await e.currentDishPromiseState.promise,t(e.currentDishPromiseState.data,"current data in currentDishPromiseState must have the property of id after a promise result").to.have.property("id"),t(e.currentDishPromiseState.data.id,"current data in currentDishPromiseState must have the correct dish id of: "+r).to.equal(r)}),it("setCurrentDishId does not initiate a new promise when its id argument is falsy",function(){e.setCurrentDishId(void 0),t(e).to.have.property("currentDishPromiseState"),t(JSON.stringify(e.currentDishPromiseState),"What should be done when you receive an undefined id in setCurrentDishId?").to.equal(JSON.stringify({}))}),it("setCurrentDishId does not initiate a new promise if the id argument is the same as before",function(){let r=601651;e.currentDishId=r,n(h,()=>e.setCurrentDishId(r)),t(e).to.have.property("currentDishPromiseState"),t(JSON.stringify(e.currentDishPromiseState),"When setCurrentDishId receives an id that is the same as the currentDishId, it should not resolve any promise").to.equal(JSON.stringify({}))})});
