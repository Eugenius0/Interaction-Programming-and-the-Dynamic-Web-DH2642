import{e}from"./index-6400038e.js";import{g}from"./filesToTest-e54ca7e1.js";import{t as h}from"./testComponentTL-6fcfc331.js";import{f as C}from"./findCustomEvents-18f41d5f.js";import{d as a}from"./mockFetch-ba9030b0.js";import"./shim-7e3475d3.js";import"./util-004fc0f1.js";import"./vue.runtime.esm-bundler-12250fee.js";import"./runtime-dom.esm-bundler-9a021e8b.js";import"./runtime-core.esm-bundler-8a2f4052.js";import"./reactivity.esm-bundler-91732a87.js";import"./index-7ea524dd.js";import"./index-93c19621.js";import"./index-37df3fb2.js";import"./client-eba7b630.js";import"./mobx.esm-c867959f.js";import"./jsxUtilities-a811c57a.js";const q="",l=(await g(`/src/views/${q}sidebarView.jsx`))?.SidebarView;describe("TW1.4 Handle native events, fire custom events [test events with Vue](/tw1.4.html)[or React](/tw1.4-react.html)",function(){this.timeout(2e5),h({vue:l},[{number:4,dishes:[]},{number:7,dishes:[]}],"SidebarView handles native events (click) on the - and + buttons",function(o,s){const t=o.queryAllByRole("button");e(t.length,"2 buttons expected if no dishes").to.equal(2),e(t[0].__vnode?.props?.onClick,"onClick listener for - button must be a function (recommendation: initially log the number minus one)").to.be.a("Function"),e(t[1].__vnode?.props?.onClick,"onClick listener for + button must be a function (recommendation: initially log the number plus one)").to.be.a("Function"),e(t[0].__vnode?.props?.onClick,"onClick listener + and - buttons must be different, because they do different things").to.not.equal(t[1].__vnode?.props?.onClick)});let f;h({vue:l},[{number:4,dishes:[],onNumberChange:function(i){f=i}},{number:7,dishes:[],onNumberChange:function(i){f=i}}],"click on + or - buttons fire the  onNumberChange custom event with the desired number as parameter",function(o,s){const t=o.queryAllByRole("button");e(t.length,"2 buttons expected if no dishes").to.equal(2),o.fireEvent.click(t[0]),e(f,"clicking the - button must fire the onNumberChange custom event with the new number value as parameter").to.equal(s?6:3),o.fireEvent.click(t[1]),e(f,"clicking the + button must fire the onNumberChange custom event with the new number value as parameter").to.equal(s?8:5)});const n=[a,{...a,id:42},{...a,id:43}],v=[a,{...a,id:42}];h({vue:l},[{number:4,dishes:n},{number:3,dishes:v}],"SidebarView detects (native) click event on dish link",function(o,s){const t=o.queryAllByRole("link");e(t.length,"A link expected for each dish").to.equal(s?v.length:n.length),e(t[0].__vnode?.props?.onClick,"onClick listener for dish links must be a function (recommendation: log the dish initially)").to.be.a("Function"),e(t[1].__vnode?.props?.onClick,"onClick listener for dish links must be a function (recommendation: log the dish initially)").to.be.a("Function"),e(t[0].__vnode?.props?.onClick,"onClick listener for dish links must be a differnt function for each dish (define a CB nested in the array rendering CB)").to.not.equal(t[1].__vnode?.props?.onClick)});let _;h({vue:l},[{number:5,dishes:n}],"click on dish link fires a custom event and passes the dish object as parameter",function(o,s){const t=C(l,{number:5,dishes:n}).a;e(t.length,"3 links expected for 3 dishes").to.equal(3);const[u,c,r]=t.map(m=>m.customEventName),[d,p,b]=t.map(m=>m.customEventParams);e(u,"custom events fired by all links should have the same name").to.equal(c),e(c,"custom events fired by all links should have the same name").to.equal(r),e(d.length,"expected custom event "+u+" to be fired with one parameter").to.equal(1),e(d[0].title,"expected custom event "+u+" fired on the first link to have the first dish as parameter").to.equal(a.title),e(`id: ${d[0].id}`,"expected custom event "+u+" fired on the first link to have the first dish as parameter").to.equal(`id: ${a.id}`),e(p[0].title,"expected custom event "+u+" fired on the second link to have the second dish as parameter").to.equal(n[1].title),e(`id: ${p[0].id}`,"expected custom event "+u+" fired on the second link to have the second dish as parameter").to.equal(`id: ${n[1].id}`),_=u}),h({vue:l},[{number:4,dishes:n},{number:7,dishes:v}],"SidebarView detects (native) click event on dish link",function(o,s){const t=o.queryAllByRole("button");e(t.length,"Expected there to be 2 buttons for + and -, as well as a button for each dish").to.equal(s?4:5),e(t[2].__vnode?.props?.onClick,"onClick listener for dish X button must be a function (recommendation: log the dish for )").to.be.a("Function"),e(t[3].__vnode?.props?.onClick,"onClick listener for dish X button must be a function (recommendation: log the dish initially)").to.be.a("Function"),e(t[2].__vnode?.props?.onClick,"onClick listener for dish X buttons must be a differnt function for each dish (define a CB nested in the array rendering CB)").to.not.equal(t[3].props?.onClick)}),h({vue:l},[{number:5,dishes:n}],"click on dish X button fires a custom event and passes the dish object as parameter",function(o,s){const[t,u,...c]=C(l,{number:5,dishes:n}).button;e(c.length,"3 x buttons expected for 3 dishes").to.equal(3);const[r,d,p]=c.map(k=>k.customEventName),[b,m,x]=c.map(k=>k.customEventParams);e(r,"custom events fired by all links should have the same name").to.equal(d),e(d,"custom events fired by all links should have the same name").to.equal(p),e(b.length,"expected custom event "+r+" to be fired with one parameter").to.equal(1),e(b[0].title,"expected custom event "+r+" fired on the first link to have the first dish as parameter").to.equal(a.title),e(`id: ${b[0].id}`,"expected custom event "+r+" fired on the first link to have the first dish as parameter").to.equal(`id: ${a.id}`),e(m[0].title,"expected custom event "+r+" fired on the second link to have the second dish as parameter").to.equal(n[1].title),e(`id: ${m[0].id}`,"expected custom event "+r+" fired on the second link to have the second dish as parameter").to.equal(`id: ${n[1].id}`),e(r,"custom event fired on clicking X button should be different from the custom event fired on clicking dish link").to.not.equal(_)})});
