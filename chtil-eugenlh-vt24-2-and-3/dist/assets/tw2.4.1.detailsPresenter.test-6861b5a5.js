import{e}from"./index-6400038e.js";import{d as t}from"./mockFetch-ba9030b0.js";import{m as n}from"./mockModel-b7c7107c.js";import{t as c}from"./testComponentTL-6fcfc331.js";import{g as d}from"./filesToTest-e54ca7e1.js";import{f as y}from"./findCustomEvents-18f41d5f.js";import{c as D}from"./cloneModel-bb0f0793.js";import"./shim-7e3475d3.js";import"./util-004fc0f1.js";import"./vue.runtime.esm-bundler-12250fee.js";import"./runtime-dom.esm-bundler-9a021e8b.js";import"./runtime-core.esm-bundler-8a2f4052.js";import"./reactivity.esm-bundler-91732a87.js";import"./index-7ea524dd.js";import"./index-93c19621.js";import"./index-37df3fb2.js";import"./client-eba7b630.js";import"./mobx.esm-c867959f.js";import"./jsxUtilities-a811c57a.js";const m="",p=(await d(`/src/vuejs/${m}detailsPresenter.jsx`))?.Details,u=(await d(`/src/reactjs/${m}detailsPresenter.jsx`))?.Details,h=(await d(`/src/views/${m}detailsView.vue`))?.DetailsView||(await d(`/src/views/${m}detailsView.jsx`))?.DetailsView,b=D((await d(`/src/${m}DinnerModel.js`))?.model);describe("TW2.4.1 Presenter passing props and custom events: Details presenter [test Vue](/tw2.4.1.html)[React](/tw2.4.1-react.html)",function(){this.timeout(2e5),before(function(){!p&&!u&&this.skip(),D(b)?.currentDishPromiseState||this.skip()}),c({vue:p,react:u,mock:[{component:h,dummyText:"mock details view"}]},[{model:new Proxy({currentDishPromiseState:{}},n("Details presenter with no promise"))},{model:new Proxy({currentDishId:t.id,currentDishPromiseState:{promise:"bla"}},n("Details presenter with no promise data"))},{model:new Proxy({currentDishId:t.id,currentDishPromiseState:{promise:"bla",error:"big error"}},n("Details presenter with promise and error"))}],"$framework Details presenter determines whether to render 'no data', loading image, or error",function(o,r,s){e(o.container.childNodes.length,"Details presenter must render one child: either suspense or the details view").to.equal(1);const w=r===0&&o.queryByText(/no data/i)||r===1&&o.queryByRole("img")||r===2&&o.queryByText(/big error/i);e(w,r===0&&"when there is no promise, Details presenter should show 'no data'"||r===1&&"when there is a promise but no data or error yet, Details presenter should render a loading image"||r===2&&"when there is a promise but it rejected, Details presenter should render the error converted to string").to.be.ok}),c({vue:p,react:u,mock:[{component:h,dummyText:"mock details view"}]},{model:new Proxy({currentDishPromiseState:{promise:"bla",data:t},currentDishId:t.id,dishes:[],numberOfGuests:4},n("DetailsPresenter with promise data"))},"$framework Details presenter renders DetailsView with props calculated from the model: guests, isDishInMenu, dishData",function(o,r,s){e(o.queryByText(/mock details view/),"DetailsPresenter should render DetailsView if the promise state includes data").to.be.ok,e(s[0]?.propsHistory[0]?.guests,"DetailsView guest prop must be read from the model").to.equal(4),e(s[0]?.propsHistory[0]?.isDishInMenu,"DetailsView isDishInMenu prop expected to be falsy with empty menu").to.not.be.ok,e(s[0]?.propsHistory[0]?.dishData.id,"DetailsView dishData prop expected to be read from the currentDish promise state").to.equal(t.id),e(s[0]?.propsHistory[0]?.dishData.title,"DetailsView dishData prop expected to be read from the currentDish promise state").to.equal(t.title)});let l;beforeEach(function(){l=void 0}),c({vue:p,react:u,mock:[{component:h,dummyText:"mock details view"}]},{model:new Proxy({currentDishPromiseState:{promise:"bla",data:t},currentDishId:t.id,dishes:[t],numberOfGuests:5,addToMenu(a){l=a},searchResultsPromiseState:{}},n("DetailsPresenter with promise data, custom event test"))},"$framework DetailsPresenter handles custom event to add the dish to the menu",function(o,r,s){e(s[0]?.propsHistory[0]?.isDishInMenu,"DetailsView isDishInMenu prop expected to be truthy if the dish is in menu").to.be.ok,e(s[0]?.propsHistory[0]?.guests,"DetailsView guest prop must be read from the model").to.equal(5);const i=y(h,{dishData:t,isDishInMenu:!0,guests:6}).button.filter(f=>f?.element?.props?.disabled)[0].customEventName;e(s[0]?.propsHistory[0][i],"expecting the custom event handler "+i+" to be a function").to.be.a("function"),e(s[0]?.propsHistory[0][i].length,"expecting the custom event handler "+i+" to not require arguments. The presenters already know which dish to add.").to.equal(0),s[0]?.propsHistory[0][i](),e(l.id,"expecting the custome event handler "+i+" to add a dish").to.equal(t.id),e(l.title,"expecting the custome event handler "+i+" to add a dish").to.equal(t.title)})});
