import{e as o}from"./index-6400038e.js";import{g as c}from"./filesToTest-e54ca7e1.js";const h="";let d;setTimeout(async()=>d=await c(`/src/${h}firebaseModel.js`));function a(){try{if(!d.modelToPersistence)return null}catch{return null}const t=d.modelToPersistence({numberOfGuests:42,dishes:[{id:44},{id:43}],currentDishId:45}),e=Object.keys(t);o(e.length,"persisted object should have three properties").to.equal(3);const r=e.find(n=>t[n]==42),u=e.find(n=>t[n]==45),i=e.find(n=>Array.isArray(t[n]));return o(r,"a property must exist for 'number of guests' and have the correct value").to.be.ok,o(u,"a property must exist for 'current dish' and have the correct value").to.be.ok,o(i,"a property must exist for 'dishes' and have the correct value").to.be.ok,o(t[i],"for each dish only the ID should be incldued in the perissted data").to.include(43),o(t[i],"for each dish only the ID should be incldued in the perissted data").to.include(44),o(t[i],"dish IDs should always be saved in the same order, regardless of the order in the dish arrray").to.eql(d.modelToPersistence({numberOfGuests:42,dishes:[{id:43},{id:44}],currentDishId:45})[i]),o(d.modelToPersistence({numberOfGuests:42,dishes:[{id:16},{id:10},{id:25},{id:35},{id:12}],currentDishId:45})[i],"to avoid usesless persistence changes, dish IDs should always be saved in the same order, regardless of the order in the dish arrray").to.eql(d.modelToPersistence({numberOfGuests:42,dishes:[{id:12},{id:35},{id:16},{id:25},{id:10}],currentDishId:45})[i]),{numberOfGuests:r,dishes:i,currentDishId:u}}const l={};function f(){return l}const s={refHistory:[],getHistory:[],setHistory:[],onHistory:[],data:null,onACB:null};function m(){const t=a();if(!t)return!1;const{numberOfGuests:e,dishes:r,currentDishId:u}=t;return e&&r&&u?(s.data={[e]:13,[r]:[45,42,22],[u]:42},s.initialized=!0,!0):!1}function y(t,e){return s.refHistory.push({db:t,path:e}),{db:t,path:e}}function p(t,e){s.initialized||console.warn("mock firebase get() used without initialization"),s.getHistory.push({ref:t,acb:e});const r={val(){return s.data}};return e&&e(r),Promise.resolve(r)}function b(t,e){s.setHistory.push({ref:t,val:e}),s.data=e}function g(t,e){s.onACB=e,s.onHistory.push({ref:t,acb:e})}const I=Object.freeze(Object.defineProperty({__proto__:null,findPersistencePropNames:a,get:p,getDatabase:f,initDB:m,onValue:g,ref:y,set:b,state:s},Symbol.toStringTag,{value:"Module"}));export{a as f,m as i,s,I as x};
