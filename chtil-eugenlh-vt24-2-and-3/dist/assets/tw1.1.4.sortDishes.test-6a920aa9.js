import{_ as p}from"./shim-7e3475d3.js";import{d as e}from"./dishesConst-c8e864fd.js";import{e as s,a as t}from"./index-6400038e.js";import"./util-004fc0f1.js";const n=await p(()=>import("../src/utilities.js"),[]);describe("TW1.1.4 sort(CB) recap exercise: sortDishes",function(){this.timeout(2e5),before(function(){(!n||!n.compareDishesCB||!n.sortDishes)&&this.skip()}),it("compareDishesCB, export it and sortDishes from utilities.js to enable",function(){this._runnable.title="compareDishesCB";const{compareDishesCB:o}=n;s(o(e[0],e[1]),"no known type comes before starter").to.equal(-1),s(o(e[1],e[0]),"no known type comes before starter").to.equal(1),s(o(e[1],e[4]),"starter comes before main course").to.equal(-1),s(o(e[4],e[1]),"starter comes before main course").to.equal(1),s(o(e[4],e[6]),"main course comes before dessert").to.equal(-1),s(o(e[6],e[4]),"main course comes before dessert").to.equal(1),s(o(e[0],e[7]),"zero (keep order) is returned for two dishes with no known type").to.equal(0),s(o(e[1],e[2]),"zero (keep order) is returned for two starters").to.equal(0),s(o(e[4],e[4]),"zero (keep order) is returned for two main courses").to.equal(0),s(o(e[6],e[6]),"zero (keep order) is returned for two desserts").to.equal(0)}),it("sort order should be: 'no known type', starter, main course, dessert (export sortDishes to enable)",function(){this._runnable.title="sort order should be: 'no type', starter, main course, dessert";const{sortDishes:o}=n,r=[e[4],e[6],e[1],e[2],e[7]],a=o(r);s(a,"sortDishes should return an array").to.be.an("array");let u=!0;try{s(a).to.deep.equal([r[1],r[0],r[3],r[2],r[4]])}catch{u=!1}u&&t.fail("Your sort is almost correct but in reverse. Consider reversing the logic of your sort() callback");let c=!0;try{s(a).to.deep.equal([r[4],r[3],r[2],r[0],r[1]])}catch{c=!1}c&&t.fail("Your sort is almost correct but has not considered the case when two objects have the same dish types"),t.equal(a.length,5,"sorted array should have same length as array provided"),t.equal(a[0],r[4],"no type should be first"),t.equal(a[1],r[2],"starter1 should be second"),t.equal(a[2],r[3],"starter2 should be third"),t.equal(a[3],r[0],"main course should be fourth"),t.equal(a[4],r[1],"dessert should be fifth");const d=[e[5],e[4],e[1],e[0]],i=o(d);t.equal(i.length,4,"sorted array should have same length as array provided"),t.equal(i[0],e[0],"no type should be first"),t.equal(i[1],e[1],"starter should be second"),t.equal(i[2],e[4],"main course should be third"),t.equal(i[3],e[5],"dessert should be fourth"),e[4],e[5],e[0],e[1];const l=o(d);t.equal(l.length,4,"sorted array should have same length as array provided"),t.equal(l[0],e[0],"no type should be first"),t.equal(l[1],e[1],"starter should be second"),t.equal(l[2],e[4],"main course should be third"),t.equal(l[3],e[5],"dessert should be fourth")}),it("sorted array should not be the same object as original array. Use e.g. spread syntax [...array]",function(){const{sortDishes:o}=n,r=[e[4],e[6],e[2],e[7]],a=[...r],u=o(r);s(u,"sortDishes should return an array").to.be.an("array"),s(u,"sorted array should create a copy").to.not.equal(r),r.forEach(function(d,i){s(d).to.equal(a[i],"do not sort the original array, copy/spread the array, then sort the copy")})})});
